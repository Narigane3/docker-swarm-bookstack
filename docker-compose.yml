services:
  proxy:
    image: traefik:v2.9
    deploy:
      mode: replicated
      replicas: 2  # Exécute 2 instances de Traefik pour la haute disponibilité
      placement:
        constraints:
          - node.role == manager  # Assure que Traefik tourne sur les nœuds managers uniquement
    command:
      - "--providers.docker=true"  # Active la détection automatique des conteneurs Docker
      - "--providers.docker.swarmMode=true"  # Active le mode Swarm
      - "--entrypoints.web.address=:80"  # Définit le point d'entrée HTTP
      - "--entrypoints.websecure.address=:443"  # Définit le point d'entrée HTTPS
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"  # Configure Let's Encrypt pour générer les certificats SSL
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"  # Email requis par Let's Encrypt
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"  # Stocke les certificats SSL
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"  # Redirige automatiquement HTTP vers HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--accesslog=true"  # Active les logs d'accès
      - "--accesslog.filepath=/logs/access.log"
      - "--accesslog.bufferingsize=100"
      - "--api.dashboard=true"  # Active le tableau de bord Traefik
      - "--api.insecure=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Expose le tableau de bord Traefik
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"  # Permet à Traefik de communiquer avec Docker
      - "./letsencrypt:/letsencrypt"
      - "./logs:/logs"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)"  # Route pour accéder à Traefik via le domaine
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.middlewares.auth.basicauth.users=${BASIC_AUTH}"  # Protection par mot de passe
      - "traefik.http.routers.traefik.middlewares=auth"
    networks:
      - traefik_network

  bookstack:
    image: linuxserver/bookstack:latest
    deploy:
      mode: replicated
      replicas: 3  # Réplication pour la haute disponibilité
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Etc/UTC
      - APP_URL=https://${APP_URL}
      - APP_KEY=${APP_KEY}
      - DB_HOST=mysql  # Connexion à la base de données
      - DB_PORT=${MYSQL_PORT}
      - DB_USERNAME=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_DATABASE=${MYSQL_DATABASE}
      - CACHE_DRIVER=redis  # Utilisation de Redis pour le cache
      - SESSION_DRIVER=redis  # Utilisation de Redis pour les sessions
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - APP_DEBUG=true
    volumes:
      - bookstack_data:/config
      - ./bookstack.env:/config/.env  # Monte un fichier d’environnement personnalisé
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bookstack.rule=Host(`${APP_URL}`)"
      - "traefik.http.routers.bookstack.entrypoints=websecure"
      - "traefik.http.routers.bookstack.tls.certresolver=myresolver"
      - "traefik.http.services.bookstack.loadbalancer.server.port=80"
    networks:
      - traefik_network

  mysql:
    image: mysql:8.0
    deploy:
      mode: replicated
      replicas: 1  # Un seul nœud MySQL pour garantir la cohérence des données
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backup:/backup  # Stockage des sauvegardes
    command: --default-authentication-plugin=mysql_native_password  # Assure la compatibilité avec BookStack
    ports:
      - ${MYSQL_PORT}:3306
    networks:
      - traefik_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:latest
    deploy:
      mode: replicated
      replicas: 2  # Réplication pour la haute disponibilité
    command: ["redis-server", "--appendonly", "yes"]  # Active la persistance des données
    volumes:
      - redis_data:/data
    networks:
      - traefik_network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  backup:
    deploy:
      mode: replicated
      replicas: 1
    image: debian:latest
    volumes:
      - ./backup:/backup
    command: "/bin/sh -c 'while true; do mysqldump -h mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} > /backup/bookstack_backup.sql; sleep 86400; done'"
    networks:
      - traefik_network

volumes:
  bookstack_data:  # Volume pour stocker les données de BookStack
  mysql_data:  # Volume pour stocker les données MySQL
  redis_data:  # Volume pour stocker les données Redis
  letsencrypt:  # Volume pour stocker les certificats SSL

networks:
  traefik_network:
    external: true
    driver: overlay  # Utilisation du réseau overlay pour Docker Swarm
